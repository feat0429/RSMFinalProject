// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RSMFinalProject.DAL.DbContext;

#nullable disable

namespace RSMFinalProject.DAL.Migrations
{
    [DbContext(typeof(AdventureWorksContext))]
    partial class AdventureWorksContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RSMFinalProject.Model.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AddressID")
                        .HasComment("Primary key for Address records.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("First street address line.");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Second street address line.");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Name of the city.");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Postal code for the street address.");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())")
                        .HasComment("ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");

                    b.Property<int>("StateProvinceId")
                        .HasColumnType("int")
                        .HasColumnName("StateProvinceID")
                        .HasComment("Unique identification number for the state or province. Foreign key to StateProvince table.");

                    b.HasKey("AddressId")
                        .HasName("PK_Address_AddressID");

                    b.HasIndex(new[] { "Rowguid" }, "AK_Address_rowguid")
                        .IsUnique();

                    b.HasIndex(new[] { "AddressLine1", "AddressLine2", "City", "StateProvinceId", "PostalCode" }, "IX_Address_AddressLine1_AddressLine2_City_StateProvinceID_PostalCode")
                        .IsUnique()
                        .HasFilter("[AddressLine2] IS NOT NULL");

                    b.HasIndex(new[] { "StateProvinceId" }, "IX_Address_StateProvinceID");

                    b.ToTable("Address", "Person", t =>
                        {
                            t.HasComment("Street address information for customers, employees, and vendors.");
                        });
                });

            modelBuilder.Entity("RSMFinalProject.Model.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerID")
                        .HasComment("Primary key.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasComputedColumnSql("(isnull('AW'+[dbo].[ufnLeadingZeros]([CustomerID]),''))", false)
                        .HasComment("Unique number identifying the customer assigned by the accounting system.");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("PersonID")
                        .HasComment("Foreign key to Person.BusinessEntityID");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())")
                        .HasComment("ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int")
                        .HasColumnName("StoreID")
                        .HasComment("Foreign key to Store.BusinessEntityID");

                    b.Property<int?>("TerritoryId")
                        .HasColumnType("int")
                        .HasColumnName("TerritoryID")
                        .HasComment("ID of the territory in which the customer is located. Foreign key to SalesTerritory.SalesTerritoryID.");

                    b.HasKey("CustomerId")
                        .HasName("PK_Customer_CustomerID");

                    b.HasIndex("PersonId");

                    b.HasIndex(new[] { "AccountNumber" }, "AK_Customer_AccountNumber")
                        .IsUnique();

                    b.HasIndex(new[] { "Rowguid" }, "AK_Customer_rowguid")
                        .IsUnique();

                    b.HasIndex(new[] { "TerritoryId" }, "IX_Customer_TerritoryID");

                    b.ToTable("Customer", "Sales", t =>
                        {
                            t.HasComment("Current customer information. Also see the Person and Store tables.");
                        });
                });

            modelBuilder.Entity("RSMFinalProject.Model.Person", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int")
                        .HasColumnName("BusinessEntityID")
                        .HasComment("Primary key for Person records.");

                    b.Property<string>("AdditionalContactInfo")
                        .HasColumnType("xml")
                        .HasComment("Additional contact information about the person stored in xml format. ");

                    b.Property<string>("Demographics")
                        .HasColumnType("xml")
                        .HasComment("Personal information such as hobbies, and income collected from online shoppers. Used for sales analysis.");

                    b.Property<int>("EmailPromotion")
                        .HasColumnType("int")
                        .HasComment("0 = Contact does not wish to receive e-mail promotions, 1 = Contact does wish to receive e-mail promotions from AdventureWorks, 2 = Contact does wish to receive e-mail promotions from AdventureWorks and selected partners. ");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("First name of the person.");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Last name of the person.");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Middle name or middle initial of the person.");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<bool>("NameStyle")
                        .HasColumnType("bit")
                        .HasComment("0 = The data in FirstName and LastName are stored in western style (first name, last name) order.  1 = Eastern style (last name, first name) order.");

                    b.Property<string>("PersonType")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength()
                        .HasComment("Primary type of person: SC = Store Contact, IN = Individual (retail) customer, SP = Sales person, EM = Employee (non-sales), VC = Vendor contact, GC = General contact");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())")
                        .HasComment("ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Surname suffix. For example, Sr. or Jr.");

                    b.Property<string>("Title")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasComment("A courtesy title. For example, Mr. or Ms.");

                    b.HasKey("BusinessEntityId")
                        .HasName("PK_Person_BusinessEntityID");

                    b.HasIndex(new[] { "Rowguid" }, "AK_Person_rowguid")
                        .IsUnique();

                    b.HasIndex(new[] { "LastName", "FirstName", "MiddleName" }, "IX_Person_LastName_FirstName_MiddleName");

                    b.HasIndex(new[] { "AdditionalContactInfo" }, "PXML_Person_AddContact");

                    b.HasIndex(new[] { "Demographics" }, "PXML_Person_Demographics");

                    b.HasIndex(new[] { "Demographics" }, "XMLPATH_Person_Demographics");

                    b.HasIndex(new[] { "Demographics" }, "XMLPROPERTY_Person_Demographics");

                    b.HasIndex(new[] { "Demographics" }, "XMLVALUE_Person_Demographics");

                    b.ToTable("Person", "Person", t =>
                        {
                            t.HasComment("Human beings involved with AdventureWorks: employees, customer contacts, and vendor contacts.");

                            t.HasTrigger("iuPerson");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("RSMFinalProject.Model.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductID")
                        .HasComment("Primary key for Product records.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Class")
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength()
                        .HasComment("H = High, M = Medium, L = Low");

                    b.Property<string>("Color")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Product color.");

                    b.Property<int>("DaysToManufacture")
                        .HasColumnType("int")
                        .HasComment("Number of days required to manufacture the product.");

                    b.Property<DateTime?>("DiscontinuedDate")
                        .HasColumnType("datetime")
                        .HasComment("Date the product was discontinued.");

                    b.Property<bool>("FinishedGoodsFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasComment("0 = Product is not a salable item. 1 = Product is salable.");

                    b.Property<decimal>("ListPrice")
                        .HasColumnType("money")
                        .HasComment("Selling price.");

                    b.Property<bool>("MakeFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasComment("0 = Product is purchased, 1 = Product is manufactured in-house.");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the product.");

                    b.Property<string>("ProductLine")
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength()
                        .HasComment("R = Road, M = Mountain, T = Touring, S = Standard");

                    b.Property<int?>("ProductModelId")
                        .HasColumnType("int")
                        .HasColumnName("ProductModelID")
                        .HasComment("Product is a member of this product model. Foreign key to ProductModel.ProductModelID.");

                    b.Property<string>("ProductNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasComment("Unique product identification number.");

                    b.Property<int?>("ProductSubcategoryId")
                        .HasColumnType("int")
                        .HasColumnName("ProductSubcategoryID")
                        .HasComment("Product is a member of this product subcategory. Foreign key to ProductSubCategory.ProductSubCategoryID. ");

                    b.Property<short>("ReorderPoint")
                        .HasColumnType("smallint")
                        .HasComment("Inventory level that triggers a purchase order or work order. ");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())")
                        .HasComment("ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");

                    b.Property<short>("SafetyStockLevel")
                        .HasColumnType("smallint")
                        .HasComment("Minimum inventory quantity. ");

                    b.Property<DateTime?>("SellEndDate")
                        .HasColumnType("datetime")
                        .HasComment("Date the product was no longer available for sale.");

                    b.Property<DateTime>("SellStartDate")
                        .HasColumnType("datetime")
                        .HasComment("Date the product was available for sale.");

                    b.Property<string>("Size")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasComment("Product size.");

                    b.Property<string>("SizeUnitMeasureCode")
                        .HasMaxLength(3)
                        .HasColumnType("nchar(3)")
                        .IsFixedLength()
                        .HasComment("Unit of measure for Size column.");

                    b.Property<decimal>("StandardCost")
                        .HasColumnType("money")
                        .HasComment("Standard cost of the product.");

                    b.Property<string>("Style")
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength()
                        .HasComment("W = Womens, M = Mens, U = Universal");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(8, 2)")
                        .HasComment("Product weight.");

                    b.Property<string>("WeightUnitMeasureCode")
                        .HasMaxLength(3)
                        .HasColumnType("nchar(3)")
                        .IsFixedLength()
                        .HasComment("Unit of measure for Weight column.");

                    b.HasKey("ProductId")
                        .HasName("PK_Product_ProductID");

                    b.HasIndex("ProductSubcategoryId");

                    b.HasIndex(new[] { "Name" }, "AK_Product_Name")
                        .IsUnique();

                    b.HasIndex(new[] { "ProductNumber" }, "AK_Product_ProductNumber")
                        .IsUnique();

                    b.HasIndex(new[] { "Rowguid" }, "AK_Product_rowguid")
                        .IsUnique();

                    b.ToTable("Product", "Production", t =>
                        {
                            t.HasComment("Products sold or used in the manfacturing of sold products.");
                        });
                });

            modelBuilder.Entity("RSMFinalProject.Model.ProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductCategoryID")
                        .HasComment("Primary key for ProductCategory records.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductCategoryId"));

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Category description.");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())")
                        .HasComment("ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");

                    b.HasKey("ProductCategoryId")
                        .HasName("PK_ProductCategory_ProductCategoryID");

                    b.HasIndex(new[] { "Name" }, "AK_ProductCategory_Name")
                        .IsUnique();

                    b.HasIndex(new[] { "Rowguid" }, "AK_ProductCategory_rowguid")
                        .IsUnique();

                    b.ToTable("ProductCategory", "Production", t =>
                        {
                            t.HasComment("High-level product categorization.");
                        });
                });

            modelBuilder.Entity("RSMFinalProject.Model.ProductSubcategory", b =>
                {
                    b.Property<int>("ProductSubcategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductSubcategoryID")
                        .HasComment("Primary key for ProductSubcategory records.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductSubcategoryId"));

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Subcategory description.");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("ProductCategoryID")
                        .HasComment("Product category identification number. Foreign key to ProductCategory.ProductCategoryID.");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())")
                        .HasComment("ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");

                    b.HasKey("ProductSubcategoryId")
                        .HasName("PK_ProductSubcategory_ProductSubcategoryID");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex(new[] { "Name" }, "AK_ProductSubcategory_Name")
                        .IsUnique();

                    b.HasIndex(new[] { "Rowguid" }, "AK_ProductSubcategory_rowguid")
                        .IsUnique();

                    b.ToTable("ProductSubcategory", "Production", t =>
                        {
                            t.HasComment("Product subcategories. See ProductCategory table.");
                        });
                });

            modelBuilder.Entity("RSMFinalProject.Model.SalesOrderDetail", b =>
                {
                    b.Property<int>("SalesOrderId")
                        .HasColumnType("int")
                        .HasColumnName("SalesOrderID")
                        .HasComment("Primary key. Foreign key to SalesOrderHeader.SalesOrderID.");

                    b.Property<int>("SalesOrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SalesOrderDetailID")
                        .HasComment("Primary key. One incremental unique number per product sold.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalesOrderDetailId"));

                    b.Property<string>("CarrierTrackingNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasComment("Shipment tracking number supplied by the shipper.");

                    b.Property<decimal>("LineTotal")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("numeric(38, 6)")
                        .HasComputedColumnSql("(isnull(([UnitPrice]*((1.0)-[UnitPriceDiscount]))*[OrderQty],(0.0)))", false)
                        .HasComment("Per product subtotal. Computed as UnitPrice * (1 - UnitPriceDiscount) * OrderQty.");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<short>("OrderQty")
                        .HasColumnType("smallint")
                        .HasComment("Quantity ordered per product.");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID")
                        .HasComment("Product sold to customer. Foreign key to Product.ProductID.");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())")
                        .HasComment("ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");

                    b.Property<int>("SpecialOfferId")
                        .HasColumnType("int")
                        .HasColumnName("SpecialOfferID")
                        .HasComment("Promotional code. Foreign key to SpecialOffer.SpecialOfferID.");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money")
                        .HasComment("Selling price of a single product.");

                    b.Property<decimal>("UnitPriceDiscount")
                        .HasColumnType("money")
                        .HasComment("Discount amount.");

                    b.HasKey("SalesOrderId", "SalesOrderDetailId")
                        .HasName("PK_SalesOrderDetail_SalesOrderID_SalesOrderDetailID");

                    b.HasIndex(new[] { "Rowguid" }, "AK_SalesOrderDetail_rowguid")
                        .IsUnique();

                    b.HasIndex(new[] { "ProductId" }, "IX_SalesOrderDetail_ProductID");

                    b.ToTable("SalesOrderDetail", "Sales", t =>
                        {
                            t.HasComment("Individual products associated with a specific sales order. See SalesOrderHeader.");

                            t.HasTrigger("iduSalesOrderDetail");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("RSMFinalProject.Model.SalesOrderHeader", b =>
                {
                    b.Property<int>("SalesOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SalesOrderID")
                        .HasComment("Primary key.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalesOrderId"));

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Financial accounting number reference.");

                    b.Property<int>("BillToAddressId")
                        .HasColumnType("int")
                        .HasColumnName("BillToAddressID")
                        .HasComment("Customer billing address. Foreign key to Address.AddressID.");

                    b.Property<string>("Comment")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasComment("Sales representative comments.");

                    b.Property<string>("CreditCardApprovalCode")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasComment("Approval code provided by the credit card company.");

                    b.Property<int?>("CreditCardId")
                        .HasColumnType("int")
                        .HasColumnName("CreditCardID")
                        .HasComment("Credit card identification number. Foreign key to CreditCard.CreditCardID.");

                    b.Property<int?>("CurrencyRateId")
                        .HasColumnType("int")
                        .HasColumnName("CurrencyRateID")
                        .HasComment("Currency exchange rate used. Foreign key to CurrencyRate.CurrencyRateID.");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID")
                        .HasComment("Customer identification number. Foreign key to Customer.BusinessEntityID.");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime")
                        .HasComment("Date the order is due to the customer.");

                    b.Property<decimal>("Freight")
                        .HasColumnType("money")
                        .HasComment("Shipping cost.");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<bool>("OnlineOrderFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasComment("0 = Order placed by sales person. 1 = Order placed online by customer.");

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Dates the sales order was created.");

                    b.Property<string>("PurchaseOrderNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasComment("Customer purchase order number reference. ");

                    b.Property<byte>("RevisionNumber")
                        .HasColumnType("tinyint")
                        .HasComment("Incremental number to track changes to the sales order over time.");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())")
                        .HasComment("ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");

                    b.Property<string>("SalesOrderNumber")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasComputedColumnSql("(isnull(N'SO'+CONVERT([nvarchar](23),[SalesOrderID]),N'*** ERROR ***'))", false)
                        .HasComment("Unique sales order identification number.");

                    b.Property<int?>("SalesPersonId")
                        .HasColumnType("int")
                        .HasColumnName("SalesPersonID")
                        .HasComment("Sales person who created the sales order. Foreign key to SalesPerson.BusinessEntityID.");

                    b.Property<DateTime?>("ShipDate")
                        .HasColumnType("datetime")
                        .HasComment("Date the order was shipped to the customer.");

                    b.Property<int>("ShipMethodId")
                        .HasColumnType("int")
                        .HasColumnName("ShipMethodID")
                        .HasComment("Shipping method. Foreign key to ShipMethod.ShipMethodID.");

                    b.Property<int>("ShipToAddressId")
                        .HasColumnType("int")
                        .HasColumnName("ShipToAddressID")
                        .HasComment("Customer shipping address. Foreign key to Address.AddressID.");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1)
                        .HasComment("Order current status. 1 = In process; 2 = Approved; 3 = Backordered; 4 = Rejected; 5 = Shipped; 6 = Cancelled");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("money")
                        .HasComment("Sales subtotal. Computed as SUM(SalesOrderDetail.LineTotal)for the appropriate SalesOrderID.");

                    b.Property<decimal>("TaxAmt")
                        .HasColumnType("money")
                        .HasComment("Tax amount.");

                    b.Property<int?>("TerritoryId")
                        .HasColumnType("int")
                        .HasColumnName("TerritoryID")
                        .HasComment("Territory in which the sale was made. Foreign key to SalesTerritory.SalesTerritoryID.");

                    b.Property<decimal>("TotalDue")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("money")
                        .HasComputedColumnSql("(isnull(([SubTotal]+[TaxAmt])+[Freight],(0)))", false)
                        .HasComment("Total due from customer. Computed as Subtotal + TaxAmt + Freight.");

                    b.HasKey("SalesOrderId")
                        .HasName("PK_SalesOrderHeader_SalesOrderID");

                    b.HasIndex("BillToAddressId");

                    b.HasIndex("ShipToAddressId");

                    b.HasIndex(new[] { "SalesOrderNumber" }, "AK_SalesOrderHeader_SalesOrderNumber")
                        .IsUnique();

                    b.HasIndex(new[] { "Rowguid" }, "AK_SalesOrderHeader_rowguid")
                        .IsUnique();

                    b.HasIndex(new[] { "CustomerId" }, "IX_SalesOrderHeader_CustomerID");

                    b.HasIndex(new[] { "SalesPersonId" }, "IX_SalesOrderHeader_SalesPersonID");

                    b.ToTable("SalesOrderHeader", "Sales", t =>
                        {
                            t.HasComment("General sales order information.");

                            t.HasTrigger("uSalesOrderHeader");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("RSMFinalProject.Model.Customer", b =>
                {
                    b.HasOne("RSMFinalProject.Model.Person", "Person")
                        .WithMany("Customers")
                        .HasForeignKey("PersonId");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("RSMFinalProject.Model.Product", b =>
                {
                    b.HasOne("RSMFinalProject.Model.ProductSubcategory", "ProductSubcategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductSubcategoryId");

                    b.Navigation("ProductSubcategory");
                });

            modelBuilder.Entity("RSMFinalProject.Model.ProductSubcategory", b =>
                {
                    b.HasOne("RSMFinalProject.Model.ProductCategory", "ProductCategory")
                        .WithMany("ProductSubcategories")
                        .HasForeignKey("ProductCategoryId")
                        .IsRequired();

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("RSMFinalProject.Model.SalesOrderDetail", b =>
                {
                    b.HasOne("RSMFinalProject.Model.Product", "Product")
                        .WithMany("SalesOrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RSMFinalProject.Model.SalesOrderHeader", "SalesOrder")
                        .WithMany("SalesOrderDetails")
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("RSMFinalProject.Model.SalesOrderHeader", b =>
                {
                    b.HasOne("RSMFinalProject.Model.Address", "BillToAddress")
                        .WithMany("SalesOrderHeaderBillToAddresses")
                        .HasForeignKey("BillToAddressId")
                        .IsRequired();

                    b.HasOne("RSMFinalProject.Model.Customer", "Customer")
                        .WithMany("SalesOrderHeaders")
                        .HasForeignKey("CustomerId")
                        .IsRequired();

                    b.HasOne("RSMFinalProject.Model.Person", "SalesPerson")
                        .WithMany("SalesOrderHeaders")
                        .HasForeignKey("SalesPersonId");

                    b.HasOne("RSMFinalProject.Model.Address", "ShipToAddress")
                        .WithMany("SalesOrderHeaderShipToAddresses")
                        .HasForeignKey("ShipToAddressId")
                        .IsRequired();

                    b.Navigation("BillToAddress");

                    b.Navigation("Customer");

                    b.Navigation("SalesPerson");

                    b.Navigation("ShipToAddress");
                });

            modelBuilder.Entity("RSMFinalProject.Model.Address", b =>
                {
                    b.Navigation("SalesOrderHeaderBillToAddresses");

                    b.Navigation("SalesOrderHeaderShipToAddresses");
                });

            modelBuilder.Entity("RSMFinalProject.Model.Customer", b =>
                {
                    b.Navigation("SalesOrderHeaders");
                });

            modelBuilder.Entity("RSMFinalProject.Model.Person", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("SalesOrderHeaders");
                });

            modelBuilder.Entity("RSMFinalProject.Model.Product", b =>
                {
                    b.Navigation("SalesOrderDetails");
                });

            modelBuilder.Entity("RSMFinalProject.Model.ProductCategory", b =>
                {
                    b.Navigation("ProductSubcategories");
                });

            modelBuilder.Entity("RSMFinalProject.Model.ProductSubcategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("RSMFinalProject.Model.SalesOrderHeader", b =>
                {
                    b.Navigation("SalesOrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
